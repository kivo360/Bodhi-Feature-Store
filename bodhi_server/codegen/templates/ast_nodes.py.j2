from typing import Any, Union, Optional

from bodhi_server.compiler import OpType, BinopType, UnaryType, NodeType, TokenType
from bodhi_server.compiler.circuit.core import ASTNode

AstType = Union[TokenType, UnaryType, BinopType, NodeType, OpType, None]


class Explicit(ASTNode):
    value: Optional[Any] = None


class Group(ASTNode):
    """Suggest that the function is written in a parenthesis."""


class Binary(ASTNode):
    """Binary operator."""


class Unary(ASTNode):
    pass

{% macro type_enum(enum) %}type: AstType = {{enum}}{% endmacro %}




{% macro ast_cls(name, token, enum) %}
class {{name}}(ASTNode):{% if enum != None %}
    {{type_enum(enum)}} {% endif %}
    name:str = "{{token.lower()}}"
{% endmacro %}


{% for node in node_list %}
    {{ ast_cls(node.class_name, node.token, node.enum) }}
{% endfor %}

